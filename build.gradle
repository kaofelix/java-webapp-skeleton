version = '1.0'

apply plugin: 'jetty'

sourceCompatibility = 1.6

// Library Versions
project.ext {
    commonsDbcpVersion = '+'
    h2dbversion = '+'
    hibernateCoreVersion = '+'
    hibernateAnnotationsVersion = '+'
    hibernateValidatorVersion = '+'
    javassistVersion = '+'
    jerseyVersion = '+'
    junitVersion = '+'
    liquibaseVersion = '+'
    mockitoVersion = '+'
    slf4jVersion = '+'
    seleniumVersion = '+'
    springVersion = '+'
}

repositories {
    mavenLocal()

    mavenCentral()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/unit/java']
        }
    }
    integration {
        java {
            srcDirs = ['src/test/integration/java']
        }
        compileClasspath = sourceSets.main.output + sourceSets.integration.compileClasspath
    }
    functional {
        java {
            srcDirs = ['src/test/functional/java']
        }
    }
}

configurations {
    integrationCompile { extendsFrom compile }
    integrationRuntime { extendsFrom integrationCompile, runtime }
}

dependencies {
/*    IntelliJ's JetGradle plugin doesn't understand the structure used.
 Easiest way to get new dependencies working is:
 1. Comment out the existing dependencies
 2. Add the dependency as 'compile' below
 3. Refresh in JetGradle
 4. "Import" them from JetGradle (right-click on the library in the root module)
 5. ALT + TAB to a different application and back (to refresh the IMLs)
 5. Move the 'orderEntry type="library"' lines from the root module's iml file to the appropriate module's iml file
 6. Change the dependency from 'compile' to 'testCompile', 'integrationCompile', ... as appropriate
 7. Uncomment the other other dependencies
*/

    /* DB */
    compile "com.h2database:h2:$project.h2dbversion"
    compile "commons-dbcp:commons-dbcp:$project.commonsDbcpVersion"
    compile "org.hibernate:hibernate-core:$project.hibernateCoreVersion"
    compile "org.hibernate:hibernate-annotations:$project.hibernateAnnotationsVersion"
    compile "org.hibernate:hibernate-validator:$project.hibernateValidatorVersion"
    compile "javassist:javassist:$project.javassistVersion"
    compile "org.springframework:spring-orm:$project.springVersion"
    compile "org.springframework:spring-jdbc:$project.springVersion"

    compile "org.liquibase:liquibase-core:$project.liquibaseVersion"

    /* Web */
    compile "org.springframework:spring-webmvc:$project.springVersion"
    compile "com.sun.jersey:jersey-core:$project.jerseyVersion"
    compile "com.sun.jersey:jersey-server:$project.jerseyVersion"
    compile "com.sun.jersey:jersey-json:$project.jerseyVersion"

    /* Utilities */
    compile "org.slf4j:slf4j-log4j12:$project.slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$project.slf4jVersion"
    compile "org.slf4j:jul-to-slf4j:$project.slf4jVersion"
    compile "org.springframework:spring-context:$project.springVersion"

    /* Unit Test */
    testCompile "junit:junit:$project.junitVersion"
    testCompile "org.mockito:mockito-all:$project.mockitoVersion"

    /* Integration Test */
    integrationCompile "junit:junit:$project.junitVersion"
    integrationCompile "org.springframework:spring-test:$project.springVersion"

    /* Functional Test */
    functionalCompile "junit:junit:$project.junitVersion"
    functionalCompile "org.seleniumhq.selenium:selenium-java:$project.seleniumVersion"

}

task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun) {
    daemon = true
}

test {
    testReportDir = file('build/reports/tests/unit')
    testResultsDir = file('build/results/tests/unit')
}

task integration(type: Test, dependsOn: test) {
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.main.runtimeClasspath + sourceSets.integration.runtimeClasspath
    testReportDir = file('build/reports/tests/integration')
    testResultsDir = file('build/results/tests/integration')
}

task functional(type: Test, dependsOn: jettyDaemon) {
    testClassesDir = sourceSets.functional.output.classesDir
    classpath = sourceSets.functional.runtimeClasspath
    testReportDir = file('build/reports/tests/functional')
    testResultsDir = file('build/results/tests/funtional')
}

task precommit(dependsOn: [test, integration])
